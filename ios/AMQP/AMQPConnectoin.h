//
//  AMQPConnectoin.h
//  AMQ
//
//  Created by Mac on 11.05.2023.
//

#ifndef AMQPConnectoin_h
#define AMQPConnectoin_h

#import <Foundation/Foundation.h>
#import "AmqpDelegate.h"
#import "AmqpRpcParameters.h"

#define DEFAULT_AMQP_HOST_NAME "line-water.host"
#define DEFAULT_AMQP_USER_NAME "guest"
#define DEFAULT_AMQP_PASSWORD "guest"
#define DEFAULT_AMQP_VIRTUAL_HOST "/"
#define DEFAULT_AMQP_PORT 5672
#define DEFAULT_AMQP_CONNECTION_NAME "IOS-connection"
#define DEFAULT_AMQP_SSL_PORT 5671
#define DEFAULT_AMQP_CHANNEL_MAX 2047
#define DEFAULT_AMQP_FRAME_MAX 131072
#define DEFAULT_AMQP_HEART_BEAT 10
#define DEFAULT_AMQP_CONNECT_TIMEOUT 10
#define DEFAULT_USE_SSL FALSE
#define DEFAULT_VERIFY_PEER FALSE
#define DEFAULT_VERIFY_HOST_NAME TRUE

@interface AMQPConnectoin : NSObject

// Флаг, сигнализирующий что подключение к серверу установлено / не установлено
@property (nonatomic, readwrite) BOOL conn_status;
@property (nonatomic, nullable, weak, readwrite) id <AmqpDelegate> delegate;

-(nonnull instancetype)initWithUserName:(nonnull NSString *) userName
                               password:(nonnull NSString *) password;

-(nonnull instancetype)initWithUserName:(nonnull NSString *) userName
                               password:(nonnull NSString *) password
                              heartBeat: (unsigned char) heartBeatTimeOut
                                use_ssl:(BOOL) ssl_flag;

-(nonnull instancetype)initWithHostName:(nonnull NSString *) hostName
                               userName:(nonnull NSString *) userName
                               password:(nonnull NSString *) password
                            virtualHost:(nonnull NSString *) virtualHost
                                   port: (unsigned int) port
                                use_ssl:(BOOL) ssl_flag;

-(nonnull instancetype)initWithHostName:(nonnull NSString *) hostName
                               userName:(nonnull NSString *) userName
                               password:(nonnull NSString *) password
                            virtualHost:(nonnull NSString *) virtualHost
                                   port: (unsigned int) port
                         connectionName:(nonnull NSString *) connection_name
                                use_ssl:(BOOL) ssl_flag;

-(nonnull instancetype)initWithHostName:(nonnull NSString *) hostName
                               userName:(nonnull NSString *) userName
                               password:(nonnull NSString *) password
                            virtualHost:(nonnull NSString *) virtualHost
                                   port:(unsigned int) port
                         connectionName:(nonnull NSString *) connectionName
                              heartBeat:(unsigned char) heartBeatTimeOut
                                use_ssl:(BOOL) ssl_flag;

-(nonnull instancetype)initWithHostName:(nonnull NSString *) hostName
                               userName:(nonnull NSString *) userName
                               password:(nonnull NSString *) password
                            virtualHost:(nonnull NSString *) virtualHost
                                   port: (unsigned int) port
                         connectionName:(nonnull NSString *) connectionName
                             channelMax: (unsigned int) channelMax
                                use_ssl:(BOOL) ssl_flag;

-(nonnull instancetype)initWithHostName:(nonnull NSString *) hostName
                               userName:(nonnull NSString *) userName
                               password:(nonnull NSString *) password
                            virtualHost:(nonnull NSString *) virtualHost
                                   port: (unsigned int) port
                         connectionName:(nonnull NSString *) connectionName
                             channelMax: (unsigned int) channelMax
                               frameMax: (unsigned long) frameMax
                                use_ssl:(BOOL) ssl_flag;

-(nonnull instancetype)initWithHostName:(nonnull NSString *) hostName
                               userName:(nonnull NSString *) userName
                               password:(nonnull NSString *) password
                            virtualHost:(nonnull NSString *) virtualHost
                                   port: (unsigned int) port
                         connectionName:(nonnull NSString *) connectionName
                             channelMax: (unsigned int) channelMax
                               frameMax: (unsigned long) frameMax
                              heartBeat: (unsigned char) heartBeatTimeOut
                                use_ssl:(BOOL) ssl_flag;

-(nonnull instancetype)initWithHostName:(nonnull NSString *) hostName
                               userName:(nonnull NSString *) userName
                               password:(nonnull NSString *) password
                            virtualHost:(nonnull NSString *) virtualHost
                                   port: (unsigned int) port
                         connectionName:(nonnull NSString *) connectionName
                             channelMax: (unsigned int) channelMax
                               frameMax: (unsigned long) frameMax
                              heartBeat: (unsigned char) heartBeatTimeOut
                         connectTimeOut: (unsigned int) connectTimeOut
                                use_ssl:(BOOL) ssl_flag;

-(NSDictionary * _Nullable)connect;
-(BOOL)disconnect;

// --------------------- Сеттеры и геттеры основных полей класса ---------------------
-(void)setHostName: (nonnull NSString *) hostName;
-(nonnull NSString *)hostName;
-(void)setUserName: (nonnull NSString *) userName;
-(nonnull NSString *)userName;
-(void)setPassword: (nonnull NSString *) password;
-(nonnull NSString *)password;
-(void)setVirtualHost: (nonnull NSString *) virtualHost;
-(nonnull NSString *)virtualHost;
-(void)setPort: (unsigned int) port;
-(unsigned int)port;
-(void)setConnectionName: (nonnull NSString *) connectionName;
-(nonnull NSString *)connectionName;
-(void)setChannelMax: (unsigned int) channelMax;
-(unsigned int)channelMax;
-(void)setFrameMax: (unsigned long) frameMax;
-(unsigned long)frameMax;
-(void)setHeartBeatTimeOut: (unsigned char) heartBeatTimeOut;
-(unsigned char) heartBeatTimeOut;
-(void)setConnectTimeOut: (unsigned int) connectTimeOut;
-(unsigned int) connectTimeOut;

// Функция позволяет включить/выключить использование ssl соединения.
// Если в момент изменения статуса флага соединение с брокером открыто, оно будет неявно
// закрыто с кодом ответа 200 (успешно).
-(void)useSSL: (BOOL) status;
-(BOOL)getSSLFlag;

// Функция позволяет включить/отключить проверку установленного SSL сертификата
-(void)verifyPeer: (BOOL) status;
// Функция позволяет получить значение флага проверки установленного SSL сертификата
-(BOOL)getVerifyPeerFlag;

// Функция позволяет включить/отключить проверку имени хоста используемого при открытии
// соединения
-(void)verifyHostName: (BOOL) status;
// Функция позволяет получить значение флага проверки имени хоста
-(BOOL)getVerifyHostNameFlag;

// Функция позволяет установить значение корневого сертификата
// Параметры:
//           path - Путь к каталогу содержащему файл корневого сертификата
//                  Файл сертификата ключа должен иметь формат 'PEM'
-(void)setSslCacert: (NSString * _Nonnull)  path;
// Функция позволяет установить значение публичного ключа шифрования и сертификата
-(void)setSslPkey: (NSString * _Nonnull) key withCert: (NSString * _Nonnull) cert;
// Функция позволяет установить криптографический модуль Engine SSL.
// Основное назначение данной функции - указать основной криптографический алгоритм,
// в случае если алгоритм не будет назначен в опретивную память будут загружены все возможные
// к реализации алгоритмы.
// Криптографический модуль Engine SSL можно рассматривать как контейнер для рализации
// криптографических алгоритмов, который обеспечивает поддержку механизма подсчета ссылок,
// позволяющую динамически загружать эти алоритмы в запущеное приложение и выгружать их из
// него.
-(void)setEngineID: (NSString * _Nonnull) engine_id;

// ================ -(NSDictionary * _Nullable)getConnectionCloseReson =======================

// Метод позволяет получить расшифровку причины закрытия соединения с сервером.

// Параметры (класс AmqpRpcParameters, коллекция "parameters"):
//               ключ        тип параметра                       значение
//            @"channel"     NSNumber(INT)    Информацию о закрытии которого необходимо получить.
//                                            (Обязательное поле).

// В случае удачного выполнения функция вернет статическую коллекцию NSDictionary с ключом <success>.
// Коллекция содержит 2 поля:
// поле с ключом <close_reson> - причина закрытия соединения. Тип NSString;
// поле с ключом <reson_code> - код причины закрытия соединения. Тип NSNumber(INT);
-(NSDictionary * _Nullable)getConnectionCloseReson;

// Функция ScheduleTaskFromString() позволяет запланировать выполнение задачи в потоке AMQPThread
// Параметры:
//            SelectorString - имя метода (селектор) который необходимо выполнить (в формате NSString);
//            func_parameters - аргументы выполняемого метода помещенные в статическую
//                              коллекцию "parameters" класса AmqpRpcParameters.
// После того, как выполнение задачи будет завершено, функция вернет статическую коллекцию NSDictionary
// содержащую результаты выполнения.
// В случае, если коллекция содержит поле с ключом <error> - выполнение функции завершилось ошибкой. Данное
// поле содержит объект NSString расшифровывающий причину возникновения ошибки, а также поле
// с ключом <error_code> содержащее код ошибки.
// В случае, если коллекция содержит поле с ключом <success> - выполнение функции завершилось успешно. Данное
// поле содержит объект NSString - результат выполнения. В зависимости от вызванного селектора за полем с
// ключком <success> могут следовать другие поля, содержащие результаты успешного выполнения.

-(NSDictionary * _Nullable)ScheduleTaskFromString: (NSString * _Nonnull) SelectorString andArgumets:(nullable AmqpRpcParameters *)func_parameters;

/* ***************************************************************************************
 
// ====================== Методы, которые могут быть вызваны функцией ====================
// ========================= ScheduleTaskFromString и их аргументы =======================
 
 
 // ============================== -(void)updateSecret: ===================================

 // Метод обновляет секретный ключ, используемый для аутентификации этого соединения.
 // Метод используется, когда у секретных данных истекает срок действия и их необходимо обновить.

 // Строка селектора - @"updateSecret:"
 // Параметры (класс AmqpRpcParameters, коллекция "parameters"):
 //               ключ        тип параметра                       значение
 
 // ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
 //            либо поле <channel> либо поле <channel_name>.
   
 //            @"channel"      NSNumber(INT)   Номер канала на которой отправляется запрос.
 //            @"channel_name"   NSString      Имя канала. Может быть использовано вместо поля <номер канала>.
 
 //            @"new_secret"     NSString      // Новый ключ шифрования (Обязательное поле).
 //            @"reason"         NSString      // Причина обновления ключа шифрования.

 // В случае удачного выполнения функция вернет поле с ключом <success>.
 

// -------------------------------------------------------------------------------
// --------------------  Методы для работы с классом Channel  --------------------
// ------------------------------------------------------------------------------- 

// ============================== -(void)channelOpen: =============================

// Метод открывает канал к серверу.

// Строка селектора - @"channelOpen:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"): 
//               ключ        тип параметра                       значение
//            @"channel"      NSNumber(INT)      Номер создаваемого канала. (Обязательное поле).
//                                               Пользователь обязан самостоятельно отслеживать на канале с каким
//                                               номером он размещает rpc запрос.
//            @"channel_name"    NSString        Произвольное имя канала. Может быть использовано внутри приложения.
//                                               Задаётся пользователем либо создаётся автоматически.

 // В случае удачного выполнения функция, в дополнение к полю с ключом <success>, вернет поле содержащее
 // следующие данные:
 // Поле <channel_number> - содержит номер созданного канала.
 // Поле <channel_name> - содержит имя созданного канала.

// ============================== -(void)channelClose ============================

// Метод указывает, что отправитель хочет закрыть канал. Это может быть связано с внутренними условиями 
// (например, принудительное завершение работы) или из-за ошибки при обработке определенного метода.

// Строка селектора - @"channelClose:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"): 
//               ключ        тип параметра                       значение
 
// ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
//            либо поле <channel> либо поле <channel_name>.
        
//        @"channel"          NSNumber(INT)    Номер канала на которой отправляется запрос.
//      @"channel_name"         NSString       Имя канала. Может быть использовано вместо поля <номер канала>.

// В случае удачного выполнения функция вернет поле с ключом <success>.

// ============================== -(void)channelFlow ============================

// Метод отправляет запрос к одноранговому узлу с требованием приостановить
// или перезапустить поток данных контента, отправляемых потребителем.
// Это механизм управления потоком, который одноранговый узел может использовать,
// чтобы избежать переполнения своих очередей или иным образом обнаружить,
// что он получает больше сообщений, чем может обработать.

// Строка селектора - @"channelFlow:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"):
//               ключ        тип параметра                       значение
 
// ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
//            либо поле <channel> либо поле <channel_name>.
        
//            @"channel"     NSNumber(INT)    Номер канала на которой отправляется запрос.
//         @"channel_name"     NSString       Имя канала. Может быть использовано вместо поля <номер канала>.
 
//            @"active"     NSNumber (BOOL)   Флаг активности. Если TRUE - одноранговый узел начинает
//                                            отправлять фреймы, если FALSE - одноранговый узел прекращает
//                                            отправку фреймов.
//                                            Если поле не будет заполнено будет установлено значение
//                                            по умолчанию - "False

// В случае удачного выполнения функция, в дополнение к полю с ключом <success>, вернет поле содержащее
// следующие данные:
// Поле <channel_is> - текущее состояние канала. Тип NSNumber BOOL.

 
 // ============================== -(void)getChannelCloseReson ============================

 // Метод позволяет получить расшифровку причины закрытия канала сервером.

 // Строка селектора - @"getChannelCloseReson:"
 // Параметры (класс AmqpRpcParameters, коллекция "parameters"):
 //               ключ        тип параметра                       значение
 //            @"channel"     NSNumber(INT)    Информацию о закрытии которого необходимо получить.
 //                                            (Обязательное поле).
 
 // В случае удачного выполнения функция вернет статическую коллекцию NSDictionary с ключом <success>.
 // Коллекция содержит поля ключами:
 // <name> - имя канала установленное пользователем присоздании или заданное автоматически;
 // <number> - номер канала;
 // <opening_time> - метка времени UNIX созданная в момент открытия канала;
 // <closing_time> - метка времени UNIX созданная в момент закрытия канала;
 // <close_reson> - причина закрытия канала;
 // <reson_code> - код причины закрытия канала;
 
// -------------------------------------------------------------------------------
// --------------------  Методы для работы с классом Exchange  -------------------
// -------------------------------------------------------------------------------

// =========================== -(void)exchangeDeclare ============================

// Метод создает обмен, если он еще не существует, и, если обмен существует, проверяет, 
// что он относится к правильному и ожидаемому классу.

// Строка селектора - @"exchangeDeclare:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"):     
//                ключ        тип параметра                       значение

// ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
//            либо поле <channel> либо поле <channel_name>.
  
//            @"channel"      NSNumber(INT)   Номер канала на которой отправляется запрос.
//            @"channel_name"    NSString     Имя канала. Может быть использовано вместо поля <номер канала>.
 
//            @"exchange"       NSString      Имя создоваемого обменника. (Обязательное поле). 
//            @"type"           NSString      Тип создаваемого обменника. 
//                                            Поле может принимать следующие значения:
//                                            @"direct", @"fanout", @"headers", @"topic".   
//                                            Если поле не будет заполнено будет установлено значение 
//                                            по умолчанию - "fanout".
//            @"passive"     NSNumber (BOOL)  Флаг пассивного объявления. Если TRUE - сервер ответит с
//                                            помощью Declare-Ok,если exchange с таким именем
//                                            уже существует, или вызовет исключение канала если нет.
//                                            Если поле не будет заполнено будет установлено значение 
//                                            по умолчанию - "False 
//            @"durable"     NSNumber (BOOL)  Флаг "долговечности". Если FALSE - exchange будет удалён после
//                                            перезапуска сервера.
//                                            Если поле не будет заполнено будет установлено значение 
//                                            по умолчанию - "False                               
//            @"auto_delete" NSNumber (BOOL)  Флаг автоматического удаления. Если TRUE - exchange удаляется, 
//                                            когда все "привязки" будут отменены.
//                                            Если поле не будет заполнено будет установлено значение 
//                                            по умолчанию - "False  
//            @"internal"    NSNumber (BOOL)  Флаг внутреннего использования. Если TRUE - сообщения не
//                                            могут быть опубликованны на данном exchange напрямую.
//                                            Его можно использовать только с "привязанными" exchange.
//                                            Если поле не будет заполнено будет установлено значение 
//                                            по умолчанию - "False  
// Необязательные аргументы (класс AmqpRpcParameters, коллекция "arguments"): 
//                ключ        тип аргумента                       значение 
//      @"alternate-exchange"    NSString     Имя альтернативного обменника, где будут размещены сообщения
//                                            размещение которых в основном обменнике, по каким
//                                            либо причинам, невозможно.

// В случае удачного выполнения функция вернет поле с ключом <success>.
 
 // ============================== -(void)exchangeBind ===================================

 // Метод позволяет "привязать" обменник к другому обменнику.

 // Строка селектора - @"exchangeBind:"
 // Параметры (класс AmqpRpcParameters, коллекция "parameters"):
 //               ключ        тип параметра                       значение
 //            @"destination"    NSString      // Имя обменника к которому необходимо выполнить "привязку"
 //                                            (Обязательное поле).
 //            @"source"         NSString      // Имя обменника который необходимо "привязать"
 //                                            (Обязательное поле).
 //            @"routing_key"    NSString      Ключ маршрутизации.

 // --------------------------------- Ключ маршрутизации ------------------------------
 // Ключ маршрутизации – это атрибут сообщения, добавленный в заголовок сообщения паблишера.
 // Ключ маршрутизации можно рассматривать как «адрес», который использует exchange,
 // чтобы решить, как маршрутизировать сообщение.
 // Сообщение отправляется в очередь (очереди), чей ключ точно соответствует ключу маршрутизации сообщения.
 // Ключ маршрутизации должен быть списком слов, ограниченным периодом (.),
 // Пример: agreements.rus и agreement.rus.irkutsk.
 // Шаблоны маршрутизации могут содержать звездочку («*»)
 // для соответствия словам в определенной позиции ключа маршрутизации
 // (например, шаблон маршрутизации “agreements.*.*.b.*” будет соответствовать только ключам маршрутизации,
 // где первое слово «agreements», а четвертое слово – «b»).
 // Символ («#») указывает на совпадение с ноль или более слов (например, шаблон маршрутизации
 // «agreements.rus.irkutsk.#»
 // cоответствует любым ключам маршрутизации, начинающимся с «agreements.rus.irkutsk»).
 // Consumer, при создании очереди, должен установить привязку к обмену с заданным шаблоном маршрутизации.
 // При использовании Fanout Exchange ключ маршрутизации игнорируется

 // Функция, также может иметь список необязательных аргументов в формате:
 // Необязательные аргументы (класс AmqpRpcParameters, коллекция "arguments"):
 //       ключ              тип аргумента                       значение
 //     NSString               NSString

 // В случае удачного выполнения функция вернет поле с ключом <success>.
 
 // ============================== -(void)exchangeUnbind ===================================

 // Метод позволяет "отвязать" обменник от другого обменника.

 // Строка селектора - @"exchangeUnbind:"
 // Параметры (класс AmqpRpcParameters, коллекция "parameters"):
 //               ключ        тип параметра                       значение
 //            @"destination"    NSString      // // Имя целевого обменника для отмены "привязки".
 //                                            (Обязательное поле).
 //            @"source"         NSString      // Имя исходного обменника для отмены "привязки".
 //                                            (Обязательное поле).
 //            @"routing_key"    NSString      Ключ маршрутизации.

 // Функция, также может иметь список необязательных аргументов в формате:
 // Необязательные аргументы (класс AmqpRpcParameters, коллекция "arguments"):
 //       ключ              тип аргумента                       значение
 //     NSString               NSString

 // В случае удачного выполнения функция вернет поле с ключом <success>.
 
// =========================== -(void)exchangeDelete ===============================

// Метод удаляет обмен. При удалении exchange все привязки к очереди на exchange отменяются.

// Строка селектора - @"exchangeDelete:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"):     
//                ключ        тип параметра                       значение
 
// ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
//            либо поле <channel> либо поле <channel_name>.
  
//            @"channel"      NSNumber(INT)   Номер канала на которой отправляется запрос.
//            @"channel_name"    NSString     Имя канала. Может быть использовано вместо поля <номер канала>.
 
//            @"exchange"       NSString      Имя создоваемого обменника. (Обязательное поле). 
//            @"passive"     NSNumber (BOOL)  Флаг "если не используется". Если TRUE, сервер удалит exchange 
//                                            только в том случае, если у него нет привязок к очереди.
//                                            Если у exchange есть привязки к очереди, сервер не удаляет
//                                            его, а вместо этого создает исключение канала.
//                                            Если поле не будет заполнено будет установлено значение 
//                                            по умолчанию - "False". 

// В случае удачного выполнения функция вернет поле с ключом <success>.

// -------------------------------------------------------------------------------
// ----------------------  Методы для работы с классом Queue  --------------------
// -------------------------------------------------------------------------------

// =========================== -(void)queueDeclare ===============================

// Метод создает или проверяет очередь. При создании новой очереди клиент может указать 
// различные свойства, которые управляют долговечностью очереди и ее содержимого, а также 
// уровнь совместного использования для очереди.

// Строка селектора - @"queueDeclare:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"):     
//                ключ        тип параметра                       значение
 
// ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
//            либо поле <channel> либо поле <channel_name>.
 
//            @"channel"      NSNumber(INT)   Номер канала на которой отправляется запрос.
//            @"channel_name"    NSString     Имя канала. Может быть использовано вместо поля <номер канала>.
 
//            @"queue"          NSString      Имя создоваемой очереди. (Обязательное поле). 
//            @"passive"     NSNumber (BOOL)  Флаг пассивного объявления. Если TRUE - сервер ответит с
//                                            помощью Declare-Ok,если очередь с таким именем уже существует, 
//                                            или вызовет исключение канала если нет.
//                                            Если поле не будет заполнено будет установлено значение 
//                                            по умолчанию - "False 
//            @"durable"     NSNumber (BOOL)  Флаг "долговечности". Если FALSE - очередь будет удалёна после
//                                            перезапуска сервера.
//                                            Если поле не будет заполнено будет установлено значение 
//                                            по умолчанию - "False                               
//            @"auto_delete" NSNumber (BOOL)  Флаг автоматического удаления. Если TRUE - очередь удаляется, 
//                                            когда все потребители закончат ее использовать.
//                                            Если поле не будет заполнено будет установлено значение 
//                                            по умолчанию - "False  
//            @"exclusive"    NSNumber (BOOL) Флаг эксклюзивности. Если TRUE - очередь будет доступна только 
//                                            для текущего соединения и будет удалена при закрытии этого
//                                            соединения.
//                                            Если поле не будет заполнено будет установлено значение 
//                                            по умолчанию - "False  
// Необязательные аргументы (класс AmqpRpcParameters, коллекция "arguments"): 
//       ключ              тип аргумента                       значение 
//  @"x-message-ttl"       NSNumber (Int)  Задает время в милисекундах в течении которого сообщения будут 
//                                         сохраняться в очереди. По истичении этого времени сообщение будет
//                                         удалено или перенаправлено в другой обменник,
//                                         заданный параметрами x-dead-letter-exchange и
//                                         x-dead-letter-routing-key.
//  @"x-expires"           NSNumber (Int)  Задает значение в миллисекундах по истечению которого происходит
//                                         удаление очереди. Очередь может израсходовать срок своего действия
//                                         только если она не имеет никаких подписчиков.
//                                         Если к очереди подключены подписчики, она сможет автоматически
//                                         удалиться только тогда, когда все подписчики вызовут Basic.Cancel
//                                         или отсоединятся. Срок жизни очереди может завершиться только
//                                         в том случае, если к ней не было запроса Basic.Get. Иначе текущее
//                                         значение установки времени жизни обнуляется, и очередь больше не
//                                         будет автоматически удаляться. Также нет гарантий того, насколько
//                                         быстро происходит удаление очереди после истечения её срока жизни.
//  @"x-max-lenght"        NSNumber (Int)  Задает максимальное допустимое количество сообщений в очереди.
//                                         Самые "старые" сообщения будут удалены из очереди
//                                         (хвост очереди будет постоянно подчищаться). Удаленные сообщения 
//                                         могут быть перенаправлены в другой обменник, заданый праметром
//                                         x-dead-letter-exchange или в соответствии с ключом маршрутизации
//                                         заданным параметром x-dead-letter-routing-key
//  @"x-max-lenght-bytes"  NSNumber (Int)  Задает максимально допустимый суммарный размер полезной нагрузки
//                                         сообщений в очереди.
//                                         При превышении установленного значения (возникло переполнение
//                                         очереди при очередной публикации сообщения) самые старые
//                                         сообщения начнут удаляться
//  @"x-overflow"          NSString        Данный аргумент используется для настройки поведения в результате
//                                         переполнения очереди:
//                                         "drop-head" -  (установлен по умолчанию) самые старые сообщения
//                                         будут удаляться;
//                                         "reject-publish" - прием сообщений будет приостановлен.
//  @"x-dead-letter-exchange"    NSString  Задает exchange, в который направляются отвергнутые
//                                         сообщения, которые не поставлены повторно в очередь
//  @"x-dead-letter-routing-key" NSString  Задает не обязательный ключ маршрутизации для отвергнутых
//                                         сообщений.
//  @"x-max-priority"      NSNumber (Int)  Разрешает сортировку по приоритетам в очереди с максимальным
//                                         значением приоритета 255 (RabbitMQ версий 3.5.0 и выше).
//                                         Число указывает максимальный приоритет, который будет поддерживать
//                                         очередь. Если аргумент не установлен, очередь не будет
//                                         поддерживать приоритет сообщений x-queue-mode — позволяет
//                                         перевести очередь в ленивый режим. В таком режиме как можно
//                                         больше сообщений будет храниться на диске. Использование
//                                         оперативной памяти будет минимально. В случае, если он не
//                                         установлен, очередь будет хранить сообщения в памяти, чтобы
//                                         доставлять сообщения максимально быстро.
//  @"x-queue-master-locator" NSNumber (Bool)   Если у нас кластер, то можно задать мастер очередь
//  @"x-ha-policy"              NSString   Используется при создании (Highly Available) очередей и
//                                         определяет как сообщение будет распространяться по узлам. Если
//                                         установлено значение "all", то сообщение будет сохраняться на
//                                         всех узлах. Если установлено значение "nodes", то
//                                         сообщение будет сохраняться на определенных узлах кластера
//  @"x-ha-nodes"               NSString   Задает узлы, к которым будет относиться (Highly Available)
//                                         очередь.

// В случае удачного выполнения функция, в дополнение к полю с ключом <success>, вернет два поля содержащих
// следующие данные:
// Поле <message_count> - содержит количество сообщений размещенных в очереди в данное время. Тип int.
// Поле <consumer_count> - содержит количество пользователей подписанных на получение сообщений из данной
// очереди. Тип int.

// ============================== -(void)queueBind ===================================

// Метод "привязывает" очередь к exchange. Пока очередь не будет "привязана", она не будет получать 
// никаких сообщений.

// Строка селектора - @"queueBind:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"):     
//               ключ        тип параметра                       значение
//            @"queue"          NSString      Имя очереди, которую необходимо "привязать" к обменнику.
//                                            (Обязательное поле).
//            @"exchange"       NSString      Имя обменника, к которому выполняется "привязка"
//                                            (Обязательное поле).
//            @"routing_key"    NSString      Ключ маршрутизации. 

// --------------------------------- Ключ маршрутизации ------------------------------
// Ключ маршрутизации – это атрибут сообщения, добавленный в заголовок сообщения паблишера. 
// Ключ маршрутизации можно рассматривать как «адрес», который использует exchange, 
// чтобы решить, как маршрутизировать сообщение. 
// Сообщение отправляется в очередь (очереди), чей ключ точно соответствует ключу маршрутизации сообщения.
// Ключ маршрутизации должен быть списком слов, ограниченным периодом (.), 
// Пример: agreements.rus и agreement.rus.irkutsk. 
// Шаблоны маршрутизации могут содержать звездочку («*») 
// для соответствия словам в определенной позиции ключа маршрутизации 
// (например, шаблон маршрутизации “agreements.*.*.b.*” будет соответствовать только ключам маршрутизации,
// где первое слово «agreements», а четвертое слово – «b»).
// Символ («#») указывает на совпадение с ноль или более слов (например, шаблон маршрутизации
// «agreements.rus.irkutsk.#»
// cоответствует любым ключам маршрутизации, начинающимся с «agreements.rus.irkutsk»).
// Consumer, при создании очереди, должен установить привязку к обмену с заданным шаблоном маршрутизации.
// При использовании Fanout Exchange ключ маршрутизации игнорируется

// Функция, также может иметь список необязательных аргументов в формате:
// Необязательные аргументы (класс AmqpRpcParameters, коллекция "arguments"): 
//       ключ              тип аргумента                       значение 
//     NSString               NSString  

// В случае удачного выполнения функция вернет поле с ключом <success>.

// ============================== -(void)queuePurge ===================================

// Метод удаляет из очереди все сообщения, которые не ожидают подтверждения.

// Строка селектора - @"queuePurge:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"):     
//               ключ        тип параметра                       значение
 
// ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
//            либо поле <channel> либо поле <channel_name>.
  
//            @"channel"      NSNumber(INT)   Номер канала на которой отправляется запрос.
//            @"channel_name"    NSString     Имя канала. Может быть использовано вместо поля <номер канала>.
 
//            @"queue"          NSString      Имя очереди, которую необходимо очистить. (Обязательное поле). 

// В случае успешного выполнения функция, в дополнение к полю с ключом <success>, вернет поле содержащее
// следующие данные:
// Поле <message_count> - количество удалённых сообщений. Тип int.

// ============================== -(void)queueDelete ==================================

// Метод удаляет очередь.

// Строка селектора - @"queueDelete:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"):     
//               ключ        тип параметра                       значение
 
// ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
//            либо поле <channel> либо поле <channel_name>.
  
//            @"channel"      NSNumber(INT)   Номер канала на которой отправляется запрос.
//            @"channel_name"    NSString     Имя канала. Может быть использовано вместо поля <номер канала>.
 
//            @"queue"          NSString      Имя очереди, которую необходимо удалить. (Обязательное поле).
//            @"if_unused"   NSNumber (BOOL)  Флаг "if-unused". Если TRUE - сервер удалит очередь, только
//                                            если у неё нет потребителей. Если в очереди есть потребители,
//                                            сервер не удаляет ее, а вместо этого создает исключение канала.
//                                            Если поле не будет заполнено будет установлено значение 
//                                            по умолчанию - "False". 
//            @"if_empty"    NSNumber (BOOL)  Флаг "if-empty". Если TRUE - сервер удалит очередь, только
//                                            если в ней нет сообщений.
//                                            Если поле не будет заполнено будет установлено значение 
//                                            по умолчанию - "False". 

// В случае успешного выполнения функция, в дополнение к полю с ключом <success>, вернет поле содержащее
// следующие данные:
// Поле <message_count> - количество сообщений в удалённой очереди. Тип int.

// ============================== -(void)queueUnbind ===================================

// Метод отменяет привязку очереди к exchange.

// Строка селектора - @"queueUnbind:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"):     
//               ключ        тип параметра                       значение
 
// ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
//            либо поле <channel> либо поле <channel_name>.
   
//            @"channel"      NSNumber(INT)   Номер канала на которой отправляется запрос.
//            @"channel_name"    NSString     Имя канала. Может быть использовано вместо поля <номер канала>.
 
//            @"queue"          NSString      Имя очереди, которую необходимо "отвязать" от обменника.
//                                            (Обязательное поле).
//            @"exchange"       NSString      Имя обменника, от которого необходимо "отвязать" очередь
//                                            (Обязательное поле).
//            @"routing_key"    NSString      Ключ маршрутизации. 

// Функция, также может иметь список необязательных аргументов в формате:
// Необязательные аргументы (класс AmqpRpcParameters, коллекция "arguments"): 
//       ключ              тип аргумента                       значение 
//     NSString               NSString  

// В случае удачного выполнения функция вернет поле с ключом <success>.

// -------------------------------------------------------------------------------
// ----------------------  Методы для работы с классом Basic ---------------------
// -------------------------------------------------------------------------------

// ============================== -(void)basicQos ===================================

// Метод позволяет установить определенное качество обслуживания. 
// QoS может быть задан для текущего канала или для всех каналов в соединении. 
// Конкретные свойства и семантика метода qos всегда зависят от семантики класса содержимого. 
// Хотя метод qos в принципе может применяться к обоим одноранговым узлам, 
// в настоящее время он имеет смысл только для сервера.

// Строка селектора - @"basicQos:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"):     
//              ключ        тип параметра                       значение
 
// ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
//            либо поле <channel> либо поле <channel_name>.
   
//        @"channel"          NSNumber(INT)    Номер канала на которой отправляется запрос.
//        @"channel_name"        NSString      Имя канала. Может быть использовано вместо поля <номер канала>.
 
//        @"prefetch_size"    NSNumber (Int)   Размер предварительной выборки. Клиент может запросить
//                                             отправку сообщений заранее, чтобы, когда клиент завершит
//                                             обработку сообщения, следующее сообщение уже хранилось
//                                             локально, вместо того, чтобы его нужно было отправлять по
//                                             каналу. Предварительная выборка повышает производительность.
//                                             В этом поле указывается размер окна предварительной выборки в
//                                             октетах (1 октет == 1 байт).
//                                             Сервер отправит сообщение заранее, если его размер равен или
//                                             меньше доступного размера предварительной выборки (а также
//                                             подпадает под другие ограничения предварительной выборки).
//                                             Может быть установлено равным нулю, что означает
//                                             "без определенного ограничения", хотя могут по-прежнему
//                                             применяться другие ограничения предварительной выборки.
//                                             Размер предварительной выборки игнорируется, если установлен
//                                             параметр "без подтверждения".
//        @"prefetch_count"   NSNumber (Int)   Подсчет предварительной выборки. Определяет окно
//                                             предварительной выборки в целых сообщениях.
//                                             Это поле может использоваться в сочетании с полем размера
//                                             предварительной выборки; сообщение будет отправлено заранее,
//                                             только если оба окна предварительной выборки (и те, что
//                                             находятся на уровне канала и соединения) разрешают это.
//                                             Количество предварительной выборки игнорируется, если
//                                             установлен параметр "без подтверждения".
//        @"global"           NSNumber (BOOL)  Флаг "global". Если FALSE - настройки QoS применяются к
//                                             каждому потребителю, если TRUE - настройки QoS применяются к
//                                             каждому каналу.
//                                             Если поле не будет заполнено будет установлено значение 
//                                             по умолчанию - "False". 

// В случае удачного выполнения функция вернет поле с ключом <success>.


// ============================== -(void)basicPublish ===================================

// Метод публикует сообщение для определенного обмена. Сообщение будет перенаправлено в очереди, 
// как определено конфигурацией exchange, и распространено среди любых активных потребителей, 
// когда транзакция, если таковая имеется, будет зафиксирована.

// Строка селектора - @"basicPublish:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"):     
//           ключ             тип параметра                       значение
 
// ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
//            либо поле <channel> либо поле <channel_name>.
   
//         @"channel"      NSNumber(INT)       Номер канала на которой отправляется запрос.
//         @"channel_name"    NSString         Имя канала. Может быть использовано вместо поля <номер канала>.
 
//        @"exchange"           NSString       Имя обменника, в котором будет опубликовано сообщение
//                                             (Обязательное поле).
//        @"routing_key"        NSString       Ключ маршрутизации сообщения. 
//        @"mandatory"        NSNumber (BOOL)  Флаг "mandatory". Флаг сообщает серверу, как реагировать, 
//                                             если сообщение соответствует ни одному ключу маршрутизации
//                                             обменника и не может быть направлено ни в одну очередь.
//                                             Если TRUE - сервер вернет сообщение с помощью метода
//                                                         basic.return.
//                                             Если FALSE - сервер автоматически удалит сообщение.
//                                             Если поле не будет заполнено будет установлено значение 
//                                             по умолчанию - "FALSE".
 
// ВНИМАНИЕ! Начиная с версии RabbitMQ 3.0 поддержка флага "immediate" ПРЕКРАЩЕНА. При попытке выставить
// данный флаг в значение TRUE Вы получите исключение подключения: "not_implemented" и подключение будет
// закрыто. В случае если Вам  необходимо иметь возможность опубликовать сообщение, которое будет удалено
// если не будет доставлено, используйте x-message-ttl очереди или expiration сообщения == 0, для
// маршрутизации таких сообщений в другую очередь используйте x-dead-letter-exchange.
 
//        @"immediate"        NSNumber (BOOL)  Флаг "immediate" (доставить немедленно). Флаг сообщает
//                                             серверу, как реагировать, если сообщение не может быть
//                                             немедленно перенаправлено потребителю очереди.
//                                             Если TRUE - сервер вернет сообщение отправителю с помощью
//                                             метода basic.return.
//                                             Если FALSE - сервер поставит сообщение в очередь, но без
//                                             гарантии, что оно когда-либо будет использовано.
//                                             Если поле не будет заполнено будет установлено значение 
//                                             по умолчанию - "False".

// Функция, также может иметь список необязательных настроек в формате:
// Необязательные аргументы (класс AmqpRpcParameters, коллекция "property"): 
//       ключ              тип аргумента                       значение 
//  @"content_type"           NSString        Тип контента - Тип контента сообщения. 
//                                            Контекст: используется приложением пользователя. 
//                                            Значение: текстовая строка (например, text/plain или
//                                            charset="utf-8" или application/json).

//  @"content_encoding"       NSString        Кодирование содержимого - Кодирование содержимого сообщения. 
//                                            Контекст: используется приложением пользователя. 
//                                            Значение: текстовая строка (например, gzip).

//  @"headers"              NSDictionary      Заголовки - Произвольные заголовки сообщений для конкретного
//                                                        приложения.
//                                            Контекст: используется при маршрутизации сообщений игнорируя 
//                                                      ключи маршрутизации. 

//  @"delivery_mode"       NSNumber (Int)     Способ доставки - Следует ли сохранить сообщение на диске? 
//                                            Контекст: используется сервером при реализации очереди
//                                                      сообщений.
//                                            Значение: не сохранять на диске - 1; сохранить - 2.

//  @"priority"            NSNumber (Int)     Приоритет - Приоритет сообщения. 
//                                            Контекст: используется сервером при реализации очереди
//                                                      сообщений.
//                                            Значения: от 0 до 9. 9 - наивысший приоритет.

//  @"correlation_id"        NSString         Идентификатор корреляции - Сообщение, соотнесенное с этим, 
//                                            например, на какой запрос это сообщение является ответом.
//                                            Контекст: используется приложением пользователя. 
//                                            Значение: любая текстовая строка.

//  @"reply_to"              NSString         Ответ - имя очереди, на которое другие приложения должны
//                                            отправлять ответ. Обычно используется для обозначения очереди 
//                                            ответов (или любого другого идентификатора, который помогает 
//                                            приложению-потребителю направлять свой ответ).
//                                            Контекст: используется приложением пользователя. 
//                                            Значение: любая текстовая строка.

//  @"expiration"           NSString          Срок действия - Время, по истечении которого сообщение будет
//                                                            удалено.
//                                            Значение поля описывает период TTL в миллисекундах. Значение
//                                            необходимо задать в виде текстовой строки. Например: @"10000"
//                                            - сообщение будет удалено из очереди через 10 секунд.
//                                            Контекст: используется сервером при реализации очереди
//                                                      сообщений.

//  @"message_id"           NSString          Идентификатор сообщения - Идентификатор сообщения в виде
//                                            строки.
//                                            Если приложениям необходимо идентифицировать сообщения, 
//                                            рекомендуется использовать этот атрибут вместо включения его в
//                                            полезную нагрузку сообщения.
//                                            Контекст: используется приложением пользователя. 
//                                            Значение: любая текстовая строка.

//  @"timestamp"          NSNumber (Long)     Метка времени UNIX - Отметка времени момента отправки
//                                            сообщения.
//                                            Контекст: используется приложением пользователя. 
//                                            Значение: секунды с начала Эпохи.

//  @"type"                 NSString          Тип - Тип сообщения, например, какой тип события или команды
//                                            представляет это сообщение.
//                                            Контекст: используется приложением пользователя. 
//                                            Значение: любая текстовая строка.

//  @"user_id"             NSString           Идентификатор пользователя - Необязательный идентификатор
//                                            пользователя.
//                                            RabbitMQ проверит указанный user_id на соответствие
//                                            фактическому имени пользователя указанному при подключении к
//                                            серверу.
//                                            Контекст: используется сервером при реализации очереди
//                                            сообщений.
//                                            Значение: user_id должен совпадать с данными аутентификации
//                                            пользователя.

//  @"app_id"              NSString           Идентификатор приложения - идентификатор приложения, в котором
//                                            было создано сообщение.
//                                            Контекст: используется приложением пользователя. 
//                                            Значение: любая текстовая строка.

//  @"cluster_id"          NSString           Идентификатор кластера (тип XML RabbitMQ="N/A"; тип
//                                            java="Строка"): Устарел в AMQP 0.9.1 - т. е. не используется.
//                                            В предыдущих версиях был идентификатор маршрутизации внутри
//                                            кластера для использования кластерными приложениями, который
//                                            не должен использоваться клиентскими приложениями (т. е. не
//                                            заполнен). Тем не менее, это устарело, было удалено из текущей
//                                            схемы и не используется серверным кодом RabbitMQ.
//                                            Контекст: используется приложением пользователя. 
//                                            Значение: любая текстовая строка.

// В случае удачного выполнения функция вернет поле с ключом <success>.


// ============================== -(void)basicConsume ===================================

// Метод посылает запрос серверу запустить "потребителя", который является временным запросом 
// на получение сообщений из определенной очереди. 
// Пользователи сохраняются до тех пор, пока они были объявлены на канале, или пока клиент не отменит их. 

// Строка селектора - @"basicConsume:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"):     
//           ключ             тип параметра                       значение
 
// ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
//            либо поле <channel> либо поле <channel_name>.
    
//        @"channel"       NSNumber(INT)   Номер канала на которой отправляется запрос.
//      @"channel_name"      NSString      Имя канала. Может быть использовано вместо поля <номер канала>.
 
//         @"queue"          NSString      Имя очереди, которую предполагается "прослушивать".
//                                         (Обязательное поле).
//      @"consumer_tag"      NSString      Тег потребителя. Задает идентификатор для потребителя. 
//                                         Тег потребителя является локальным для канала, поэтому два
//                                         клиента могут использовать одни и те же потребительские теги. 
//                                         Если это поле пустое, сервер сгенерирует уникальный тег.
//                                         Клиент НЕ ДОЛЖЕН указывать тег, который ссылается на существующего
//                                         потребителя.
//        @"no_local"     NSNumber (BOOL)  Флаг игнорирования отправителя/ Если флаг установлен, то
//                                         сервер не отправляет сообщения соединению которое его
//                                         опубликовало. На данный момент не реализован и значения не
//                                         имеет.
//                                         Если поле не будет заполнено будет установлено значение 
//                                         по умолчанию - "False".
//        @"no_ack"       NSNumber (BOOL)  Флаг способа подтверждения полученного сообщения -
//                                         Если установлено значение TRUE(YES) сообщения подверждаются
//                                         автоматически сразу при получении, если установлено значение
//                                         FALSE(NO) - получатель сообщения ОБЯЗАН подтвердить получение
//                                         вызвав селектор @"basiAck:".
//                                         Если поле не будет заполнено будет установлено значение 
//                                         по умолчанию - "False" 
//        @"exclusive"    NSNumber (BOOL)  Флаг эксклюзивности - Устанавливает данного потребителя в
//                                         качестве единственного получателя сообщений из указанной
//                                         очереди. Может быть установлен только если ранее, к указанной
//                                         очереди небыл подключен другой потребитель.
//                                         Если поле не будет заполнено будет установлено значение 
//                                         по умолчанию - "False".

// Функция, также может иметь список необязательных аргументов в формате:
// Необязательные аргументы (класс AmqpRpcParameters, коллекция "arguments"): 
//       ключ              тип аргумента                       значение 
//     NSString               NSString  

// В случае успешного выполнения функция, в дополнение к полю с ключом <success>, вернет поле содержащее следующие данные:
// Поле <consumer_tag> - тег потребителя. Тип NSString.

// ============================== -(void)basicCancel ===================================

// Метод завершает работу с потребителем очереди. И отписывается от получения сообщений.

// Строка селектора - @"basicCancel:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"):     
//           ключ             тип параметра                       значение
 
// ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
//            либо поле <channel> либо поле <channel_name>.
     
//        @"channel"          NSNumber(INT)   Номер канала на которой отправляется запрос.
//      @"channel_name"         NSString      Имя канала. Может быть использовано вместо поля <номер канала>.
 
//      @"consumer_tag"         NSString      Тег потребителя полученный при выполнении метода
//                                            basicConsume().

// В случае успешного выполнения функция, в дополнение к полю с ключом <success>, вернет поле содержащее
// следующие данные:
// Поле <consumer_tag> - тег потребителя. Тип NSString.


// ============================== -(void)basicRecover ===================================

// Метод отправляет запрос на сервер о повторной доставке всех неподтвержденных сообщений
// по указанному каналу.

// Строка селектора - @"basicRecover:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"):     
//           ключ             тип параметра                       значение
 
// ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
//            либо поле <channel> либо поле <channel_name>.
     
//        @"channel"          NSNumber(INT)    Номер канала на которой отправляется запрос.
//      @"channel_name"         NSString       Имя канала. Может быть использовано вместо поля <номер канала>.
 
//        @"requeue"         NSNumber (BOOL)   Флаг "requeue". Если TRUE - сервер попытается запросить
//                                             сообщение, затем доставив его альтернативному подписчику.
//                                             Если FALSE - сообщение будет повторно доставлено
//                                             первоначальному получателю.
//                                             Если поле не будет заполнено будет установлено значение 
//                                             по умолчанию - "False"

// В случае удачного выполнения функция вернет поле с ключом <success>.


// ============================== -(void)basicGet ===================================

// Метод обеспечивает прямой доступ к сообщениям в очереди с использованием синхронного диалога, 
// который предназначен для конкретных типов приложений, где синхронная функциональность важнее 
// производительности.

// Строка селектора - @"basicGet:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"):     
//           ключ             тип параметра                       значение
 
// ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
//            либо поле <channel> либо поле <channel_name>.
      
//        @"channel"       NSNumber(INT)   Номер канала на которой отправляется запрос.
//      @"channel_name"      NSString      Имя канала. Может быть использовано вместо поля <номер канала>.
 
//         @"queue"          NSString      Имя очереди, из которой необходимо получить сообщения.
//                                         (Обязательное поле).
//        @"no_ack"       NSNumber (BOOL)  Флаг способа подтверждения полученного сообщения -
//                                         Если установлено значение TRUE(YES) сообщения подверждаются
//                                         автоматически сразу при получении, если установлено значение
//                                         FALSE(NO) - получатель сообщения ОБЯЗАН подтвердить получение
//                                         вызвав селектор @"basiAck:".
//                                         Если поле не будет заполнено будет установлено значение 
//                                         по умолчанию - "False" 
// В случае успешного выполнения функция, в дополнение к полю с ключом <success>, вернет поле содержащее
// следующие данные:
// В случае если указанная очередь пуста и сообщений получить не удалось функция вернет поле с ключом
// <cluster_id> тип NSString.
// В случае если сообщение получено функция вернет поле с ключом <message> содержащее объект AmqpMessage.



// ============================== -(void)basicReject ===================================

// Метод позволяет клиенту отклонить сообщение. Его можно использовать для прерывания 
// и отмены больших входящих сообщений или возврата необработанных сообщений в их 
// исходную очередь.

// Строка селектора - @"basicReject:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"):     
//           ключ             тип параметра                       значение
 
// ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
//            либо поле <channel> либо поле <channel_name>.
       
//        @"channel"          NSNumber(INT)    Номер канала на которой отправляется запрос.
//      @"channel_name"         NSString       Имя канала. Может быть использовано вместо поля <номер канала>.
 
//       @"delivery_tag"     NSNumber (Long)   Тег доставки - уникальный номер назначамый сервером каждому
//                                             сообщению.
//        @"requeue"         NSNumber (BOOL)   Флаг "requeue". Если TRUE - сервер попытается запросить
//                                             сообщение.
//                                             Если запрос равен false или попытка запроса завершается
//                                             неудачей, сообщения отбрасываются или помечаются как
//                                             "мертвое" (dead-lettered).
//                                             Если поле не будет заполнено будет установлено значение 
//                                             по умолчанию - "False" 

// В случае удачного выполнения функция вернет поле с ключом <success>.


// ============================== -(void)basicAck ===================================

// Метод подтверждает одно или несколько сообщений, полученных с помощью методов BASIC_DELIVER или
// BASIC_GET.
// Подтверждение может быть выполнено для одного сообщения или набора сообщений вплоть до определенного 
// сообщения включительно.

// Строка селектора - @"basicAck:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"):  
//           ключ             тип параметра                       значение
 
// ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
//            либо поле <channel> либо поле <channel_name>.
        
//        @"channel"          NSNumber(INT)    Номер канала на которой отправляется запрос.
//      @"channel_name"         NSString       Имя канала. Может быть использовано вместо поля <номер канала>.
 
//       @"delivery_tag"     NSNumber (Long)   Тег доставки - уникальный номер назначамый сервером каждому
//                                             сообщению.
//        @"multiple"        NSNumber (BOOL)   Флаг "multiple". Если TRUE - тег доставки обрабатывается как
//                                             "до и включительно", так что несколько сообщений могут быть
//                                             подтверждены одним методом.
//                                             Если FALSE - тег доставки относится к одному сообщению. 
//                                             Если в флаг multiple == TRUE, а delivery_tag == 0, будут
//                                             подтверждены все ожидающие отправки сообщения.
//                                             Если поле не будет заполнено будет установлено значение 
//                                             по умолчанию - "False" 

// В случае удачного выполнения функция вернет поле с ключом <success>.

// ============================== -(void)basicNack ===================================

// Метод позволяет клиенту отклонять одно или несколько входящих сообщений. 
// Его можно использовать для прерывания и отмены больших входящих сообщений или возврата 
// необработанных сообщений в их исходную очередь. 
// Этот метод также используется сервером для информирования издателей на каналах в режиме 
// подтверждения необработанных сообщений. Если издатель получает этот метод, ему, вероятно, 
// необходимо повторно опубликовать проблемные сообщения.

// Строка селектора - @"basicNack:"
// Параметры (класс AmqpRpcParameters, коллекция "parameters"):  
//           ключ             тип параметра                       значение
 
// ВНИМАНИЕ!  В параметрах запроса ОБЯЗАТЕЛЬНО должно присутствовать одно из полей указывающих на используемый канал
//            либо поле <channel> либо поле <channel_name>.
        
//        @"channel"          NSNumber(INT)    Номер канала на которой отправляется запрос.
//      @"channel_name"         NSString       Имя канала. Может быть использовано вместо поля <номер канала>.
 
//       @"delivery_tag"     NSNumber (Long)   Тег доставки - уникальный номер назначамый сервером каждому
//                                             сообщению.
//        @"multiple"        NSNumber (BOOL)   Флаг "multiple". Если TRUE - тег доставки обрабатывается
//                                             как "до и включительно", так что несколько сообщений могут
//                                             быть отклонены одним методом.
//                                             Если FALSE - тег доставки относится к одному сообщению. 
//                                             Если в флаг multiple == TRUE, а delivery_tag == 0, будут
//                                             отклонены все ожидающие доставки сообщения.
//                                             Если поле не будет заполнено будет установлено значение 
//                                             по умолчанию - "False".
//        @"requeue"        NSNumber (BOOL)    Флаг "requeue". Если TRUE - сервер попытается запросить
//                                             сообщение. Если запрос равен false или попытка запроса
//                                             завершается неудачей, сообщения отбрасываются или помечаются
//                                             как мертвое (dead-lettered).
//                                             Клиенты, получившие метод Nack, должны игнорировать этот
//                                             флаг.
//                                             Если поле не будет заполнено будет установлено значение 
//                                             по умолчанию - "False".

// В случае удачного выполнения функция вернет поле с ключом <success>.

 **************************************************************************************/

@end


#endif /* AMQPConnectoin_h */
